---
-- @author wesen
-- @copyright 2018 wesen <wesen-ac@web.de>
-- @release 0.1
-- @license MIT
--

local BaseTag = require("Output/TemplateRenderer/TableTemplateParser/Tags/BaseTag");
local RowTag = require("Output/TemplateRenderer/TableTemplateParser/Tags/RowTag");

---
-- Represents the root of the tree of tags.
-- This is the container in which the whole text template will be stored
--
-- @type RootTag
--
local RootTag = setmetatable({}, {__index = BaseTag});


---
-- RootTag constructor.
--
-- @treturn RootTag The RootTag instance
--
function RootTag:__construct()

  local instance = BaseTag:__construct();
  setmetatable(instance, {__index = RootTag});

  return instance;

end

getmetatable(RootTag).__call = RootTag.__construct;


function RootTag:addInnerText(_innerText)

  local rowTag = RowTag();
  self:addInnerTag(rowTag);

  return rowTag:addInnerText(_innerText);

end

---
-- Adds an inner tag to the generated table rows.
--
-- @tparam table _tableRows The generated table rows
-- @tparam table _innerTagTable The table that was generated by the inner tag
--
function RootTag:addInnerTagTableToTableRows(_tableRows, _innerTagTable)

  -- The inner tags of the root tag are row tags only
  table.insert(_tableRows, _innerTagTable[1]);

end


return RootTag;
